{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 创建 axios 实例\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('admin_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 统一处理响应\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 认证 API\nexport const authAPI = {\n  login: async data => {\n    const response = await apiClient.post('/auth/login', data);\n    return response.data;\n  },\n  register: async data => {\n    const response = await apiClient.post('/auth/register', data);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await apiClient.get('/auth/me');\n    return response.data;\n  },\n  logout: async () => {\n    const response = await apiClient.post('/auth/logout');\n    return response.data;\n  }\n};\n\n// 用户管理 API\nexport const userAPI = {\n  getUsers: async params => {\n    const response = await apiClient.get('/users', {\n      params\n    });\n    return response.data;\n  },\n  getUserById: async id => {\n    const response = await apiClient.get(`/users/${id}`);\n    return response.data;\n  },\n  updateUser: async (id, data) => {\n    const response = await apiClient.put(`/users/${id}`, data);\n    return response.data;\n  },\n  deleteUser: async id => {\n    const response = await apiClient.delete(`/users/${id}`);\n    return response.data;\n  },\n  updateUserStatus: async (id, status) => {\n    const response = await apiClient.patch(`/users/${id}/status`, {\n      status\n    });\n    return response.data;\n  }\n};\n\n// 商品管理 API\nexport const productAPI = {\n  getProducts: async params => {\n    const response = await apiClient.get('/products', {\n      params\n    });\n    return response.data;\n  },\n  getProductById: async id => {\n    const response = await apiClient.get(`/products/${id}`);\n    return response.data;\n  },\n  createProduct: async data => {\n    const response = await apiClient.post('/products', data);\n    return response.data;\n  },\n  updateProduct: async (id, data) => {\n    const response = await apiClient.put(`/products/${id}`, data);\n    return response.data;\n  },\n  deleteProduct: async id => {\n    const response = await apiClient.delete(`/products/${id}`);\n    return response.data;\n  },\n  updateProductStatus: async (id, status) => {\n    const response = await apiClient.patch(`/products/${id}/status`, {\n      status\n    });\n    return response.data;\n  }\n};\n\n// 订单管理 API\nexport const orderAPI = {\n  getOrders: async params => {\n    const response = await apiClient.get('/orders', {\n      params\n    });\n    return response.data;\n  },\n  getOrderById: async id => {\n    const response = await apiClient.get(`/orders/${id}`);\n    return response.data;\n  },\n  updateOrderStatus: async (id, status) => {\n    const response = await apiClient.patch(`/orders/${id}/status`, {\n      status\n    });\n    return response.data;\n  },\n  deleteOrder: async id => {\n    const response = await apiClient.delete(`/orders/${id}`);\n    return response.data;\n  }\n};\n\n// 统计数据 API\nexport const statsAPI = {\n  getDashboardStats: async () => {\n    const response = await apiClient.get('/stats/dashboard');\n    return response.data;\n  },\n  getMerchantStats: async () => {\n    const response = await apiClient.get('/stats/merchant');\n    return response.data;\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","data","post","register","getCurrentUser","get","logout","userAPI","getUsers","params","getUserById","id","updateUser","put","deleteUser","delete","updateUserStatus","patch","productAPI","getProducts","getProductById","createProduct","updateProduct","deleteProduct","updateProductStatus","orderAPI","getOrders","getOrderById","updateOrderStatus","deleteOrder","statsAPI","getDashboardStats","getMerchantStats"],"sources":["/Users/937bb/Documents/userProject/AutoPickup/admin-panel/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { ApiResponse, User, Product, Order, LoginRequest, RegisterRequest, ProductFormData } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 创建 axios 实例\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('admin_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 统一处理响应\napiClient.interceptors.response.use(\n  (response: AxiosResponse<ApiResponse>) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('admin_token');\n      localStorage.removeItem('admin_user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// 认证 API\nexport const authAPI = {\n  login: async (data: LoginRequest): Promise<ApiResponse<{ token: string; user: User }>> => {\n    const response = await apiClient.post('/auth/login', data);\n    return response.data;\n  },\n\n  register: async (data: RegisterRequest): Promise<ApiResponse<{ user: User }>> => {\n    const response = await apiClient.post('/auth/register', data);\n    return response.data;\n  },\n\n  getCurrentUser: async (): Promise<ApiResponse<User>> => {\n    const response = await apiClient.get('/auth/me');\n    return response.data;\n  },\n\n  logout: async (): Promise<ApiResponse> => {\n    const response = await apiClient.post('/auth/logout');\n    return response.data;\n  },\n};\n\n// 用户管理 API\nexport const userAPI = {\n  getUsers: async (params?: { role?: string; status?: string; page?: number; limit?: number }): Promise<ApiResponse<{ users: User[]; total: number; page: number; totalPages: number }>> => {\n    const response = await apiClient.get('/users', { params });\n    return response.data;\n  },\n\n  getUserById: async (id: string): Promise<ApiResponse<User>> => {\n    const response = await apiClient.get(`/users/${id}`);\n    return response.data;\n  },\n\n  updateUser: async (id: string, data: Partial<User>): Promise<ApiResponse<User>> => {\n    const response = await apiClient.put(`/users/${id}`, data);\n    return response.data;\n  },\n\n  deleteUser: async (id: string): Promise<ApiResponse> => {\n    const response = await apiClient.delete(`/users/${id}`);\n    return response.data;\n  },\n\n  updateUserStatus: async (id: string, status: 'active' | 'inactive' | 'pending'): Promise<ApiResponse<User>> => {\n    const response = await apiClient.patch(`/users/${id}/status`, { status });\n    return response.data;\n  },\n};\n\n// 商品管理 API\nexport const productAPI = {\n  getProducts: async (params?: { merchant?: string; category?: string; status?: string; page?: number; limit?: number }): Promise<ApiResponse<{ products: Product[]; total: number; page: number; totalPages: number }>> => {\n    const response = await apiClient.get('/products', { params });\n    return response.data;\n  },\n\n  getProductById: async (id: string): Promise<ApiResponse<Product>> => {\n    const response = await apiClient.get(`/products/${id}`);\n    return response.data;\n  },\n\n  createProduct: async (data: ProductFormData): Promise<ApiResponse<Product>> => {\n    const response = await apiClient.post('/products', data);\n    return response.data;\n  },\n\n  updateProduct: async (id: string, data: Partial<ProductFormData>): Promise<ApiResponse<Product>> => {\n    const response = await apiClient.put(`/products/${id}`, data);\n    return response.data;\n  },\n\n  deleteProduct: async (id: string): Promise<ApiResponse> => {\n    const response = await apiClient.delete(`/products/${id}`);\n    return response.data;\n  },\n\n  updateProductStatus: async (id: string, status: 'active' | 'inactive'): Promise<ApiResponse<Product>> => {\n    const response = await apiClient.patch(`/products/${id}/status`, { status });\n    return response.data;\n  },\n};\n\n// 订单管理 API\nexport const orderAPI = {\n  getOrders: async (params?: { merchant?: string; status?: string; page?: number; limit?: number }): Promise<ApiResponse<{ orders: Order[]; total: number; page: number; totalPages: number }>> => {\n    const response = await apiClient.get('/orders', { params });\n    return response.data;\n  },\n\n  getOrderById: async (id: string): Promise<ApiResponse<Order>> => {\n    const response = await apiClient.get(`/orders/${id}`);\n    return response.data;\n  },\n\n  updateOrderStatus: async (id: string, status: 'pending' | 'completed' | 'expired' | 'cancelled'): Promise<ApiResponse<Order>> => {\n    const response = await apiClient.patch(`/orders/${id}/status`, { status });\n    return response.data;\n  },\n\n  deleteOrder: async (id: string): Promise<ApiResponse> => {\n    const response = await apiClient.delete(`/orders/${id}`);\n    return response.data;\n  },\n};\n\n// 统计数据 API\nexport const statsAPI = {\n  getDashboardStats: async (): Promise<ApiResponse<{\n    totalUsers: number;\n    totalMerchants: number;\n    totalProducts: number;\n    totalOrders: number;\n    totalRevenue: number;\n    recentOrders: Order[];\n    topProducts: Product[];\n  }>> => {\n    const response = await apiClient.get('/stats/dashboard');\n    return response.data;\n  },\n\n  getMerchantStats: async (): Promise<ApiResponse<{\n    totalProducts: number;\n    totalOrders: number;\n    totalRevenue: number;\n    pendingOrders: number;\n    recentOrders: Order[];\n  }>> => {\n    const response = await apiClient.get('/stats/merchant');\n    return response.data;\n  },\n};\n\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAG5C,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,SAAS,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAoC,IAAK;EACxC,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;IACtCT,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;IACrCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,IAAkB,IAA0D;IACxF,MAAMT,QAAQ,GAAG,MAAMhB,SAAS,CAAC0B,IAAI,CAAC,aAAa,EAAED,IAAI,CAAC;IAC1D,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDE,QAAQ,EAAE,MAAOF,IAAqB,IAA2C;IAC/E,MAAMT,QAAQ,GAAG,MAAMhB,SAAS,CAAC0B,IAAI,CAAC,gBAAgB,EAAED,IAAI,CAAC;IAC7D,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDG,cAAc,EAAE,MAAAA,CAAA,KAAwC;IACtD,MAAMZ,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,UAAU,CAAC;IAChD,OAAOb,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDK,MAAM,EAAE,MAAAA,CAAA,KAAkC;IACxC,MAAMd,QAAQ,GAAG,MAAMhB,SAAS,CAAC0B,IAAI,CAAC,cAAc,CAAC;IACrD,OAAOV,QAAQ,CAACS,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,OAAO,GAAG;EACrBC,QAAQ,EAAE,MAAOC,MAA0E,IAA+F;IACxL,MAAMjB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,QAAQ,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC1D,OAAOjB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDS,WAAW,EAAE,MAAOC,EAAU,IAAiC;IAC7D,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,UAAUM,EAAE,EAAE,CAAC;IACpD,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDW,UAAU,EAAE,MAAAA,CAAOD,EAAU,EAAEV,IAAmB,KAAiC;IACjF,MAAMT,QAAQ,GAAG,MAAMhB,SAAS,CAACqC,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEV,IAAI,CAAC;IAC1D,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDa,UAAU,EAAE,MAAOH,EAAU,IAA2B;IACtD,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAACuC,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;IACvD,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDe,gBAAgB,EAAE,MAAAA,CAAOL,EAAU,EAAEjB,MAAyC,KAAiC;IAC7G,MAAMF,QAAQ,GAAG,MAAMhB,SAAS,CAACyC,KAAK,CAAC,UAAUN,EAAE,SAAS,EAAE;MAAEjB;IAAO,CAAC,CAAC;IACzE,OAAOF,QAAQ,CAACS,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,UAAU,GAAG;EACxBC,WAAW,EAAE,MAAOV,MAAiG,IAAqG;IACxN,MAAMjB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,WAAW,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC7D,OAAOjB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDmB,cAAc,EAAE,MAAOT,EAAU,IAAoC;IACnE,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,aAAaM,EAAE,EAAE,CAAC;IACvD,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDoB,aAAa,EAAE,MAAOpB,IAAqB,IAAoC;IAC7E,MAAMT,QAAQ,GAAG,MAAMhB,SAAS,CAAC0B,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;IACxD,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDqB,aAAa,EAAE,MAAAA,CAAOX,EAAU,EAAEV,IAA8B,KAAoC;IAClG,MAAMT,QAAQ,GAAG,MAAMhB,SAAS,CAACqC,GAAG,CAAC,aAAaF,EAAE,EAAE,EAAEV,IAAI,CAAC;IAC7D,OAAOT,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDsB,aAAa,EAAE,MAAOZ,EAAU,IAA2B;IACzD,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAACuC,MAAM,CAAC,aAAaJ,EAAE,EAAE,CAAC;IAC1D,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAEDuB,mBAAmB,EAAE,MAAAA,CAAOb,EAAU,EAAEjB,MAA6B,KAAoC;IACvG,MAAMF,QAAQ,GAAG,MAAMhB,SAAS,CAACyC,KAAK,CAAC,aAAaN,EAAE,SAAS,EAAE;MAAEjB;IAAO,CAAC,CAAC;IAC5E,OAAOF,QAAQ,CAACS,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMwB,QAAQ,GAAG;EACtBC,SAAS,EAAE,MAAOjB,MAA8E,IAAiG;IAC/L,MAAMjB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,SAAS,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC3D,OAAOjB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED0B,YAAY,EAAE,MAAOhB,EAAU,IAAkC;IAC/D,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,WAAWM,EAAE,EAAE,CAAC;IACrD,OAAOnB,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED2B,iBAAiB,EAAE,MAAAA,CAAOjB,EAAU,EAAEjB,MAAyD,KAAkC;IAC/H,MAAMF,QAAQ,GAAG,MAAMhB,SAAS,CAACyC,KAAK,CAAC,WAAWN,EAAE,SAAS,EAAE;MAAEjB;IAAO,CAAC,CAAC;IAC1E,OAAOF,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED4B,WAAW,EAAE,MAAOlB,EAAU,IAA2B;IACvD,MAAMnB,QAAQ,GAAG,MAAMhB,SAAS,CAACuC,MAAM,CAAC,WAAWJ,EAAE,EAAE,CAAC;IACxD,OAAOnB,QAAQ,CAACS,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM6B,QAAQ,GAAG;EACtBC,iBAAiB,EAAE,MAAAA,CAAA,KAQZ;IACL,MAAMvC,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,kBAAkB,CAAC;IACxD,OAAOb,QAAQ,CAACS,IAAI;EACtB,CAAC;EAED+B,gBAAgB,EAAE,MAAAA,CAAA,KAMX;IACL,MAAMxC,QAAQ,GAAG,MAAMhB,SAAS,CAAC6B,GAAG,CAAC,iBAAiB,CAAC;IACvD,OAAOb,QAAQ,CAACS,IAAI;EACtB;AACF,CAAC;AAED,eAAezB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}